# Code on Statebus

Developers today use git to both:
1. Archive their code's history
2. Synchronize code across developers and servers

We are replacing #2 with statebus.

- Synchronize a folder with `/code/<folder>`
- Create multiple versions for multiple developers and servers
  - Like a `mike-work` and `travis-work` version, and a `live` version
  - Or load old cheeseburger sessions with the right old version of the code

Then the server can load our code from `/code/` and pre-render the html.

## Folder Sync, Step 1

The `bs` command will sync a file with `/code/<filename>`.  In this
first step, you'll run it each time you want to sync.  Example:

```
bs statebus/README.md /code/statebus/readme
```

The first time you run this command, it'll initialize:

- Create the file (if it doesn't exist)
- Create the state (if it doesn't exist)
- Give them the same data
- Or if they both exist already, and conflict, tell the user to fix the problem
- Store a shadow of the file in ~/.statebus

Now you can edit the file.  When you're done, just save it, and re-run
the same `bs` command to synchronize your file with the global state.
It will:

1. Diff the file with the shadow copy to see what you've changed
2. Merge those changes into the current shared state of the file
3. Put the updates back into your file

Now, if there were any changes from the network, your editor will
prompt you to load them into your copy of the file as well.

This will give us a working code-sharing system.  Then we can get to the Automatic Folder Sync (see below) by adding:

- Editor integration: automatically run `bs`, and load the new file, after save.
- A perfected filesystem watch notifier
- Two-layer differential sync
  - Layer one synchronizes multiple file-editing buffers to a single file
  - Layer two synchronizes multiple filesystems to a single state
  - (Or does this first step already need two layers?)


## Automatic Folder Sync

The `bs` command will sync a filesystem folder with `/code/<folder>`.
Example usage:

```
npm install statebusfs -g
git clone https://github.com/morgandixon/cheeseburger.git
cd cheeseburger
bs . /code/cheeseburger
```

To do:
  - Solve the cold-start problem when local file vs. statebus state differs
  - Fix "no such file or directory" bug
  - Sync entire folder instead of just file
  - Make `bs` ignore `.git` folders... and maybe some other things too.
  - Add versioning (below)
  - Add auth to prevent hackers from running malicious code on server
  - Add differential sync to allow simultaneous editors

### Cold start

Problem: When you first run `bs`, the file might differ from state.
We don't know if you've edited the file, or if someone else has edited
the state.

Solution 1: Store a copy of the last-known version of each file in
.statebusfs/, and then if your local copy == this version, we know
that the server state is newer.  Otherwise, we can report an error and
let you fix it.

Solution 2: With differential sync, we can actually do a diff from
this last version and your edits, and send those through the tubes.




## Versions

Each `/code/` key will take a `?v=<version>` parameter, like this:
`/code/cheeseburger/session?v=3.0`.  The version is an arbitrary
string, like `v=3.0`, `v=mikedev`, or `v=a72h23j89l`.  The default
version exists at the key without any `?v=`.  This version will be
live.

To load a non-default version from the web server, you can pass
`?v=<version>` in the url.  For instance:

  - When developing cheeseburger, you might access the url
  `https://cheeseburgertherapy.com/session?id=help&user=1&helper=true&v=morgan_dev`.
  - When loading an old cheeseburger session, we can store the version of cheese that it was created with, and then re-load that version with a url like `https://cheeseburgertherapy.com/session?...&v=A8372S`

### Version Operations

Your files will be linked to a particular version.  Typically, you'll
be editing `dev`, and then periodically will want to `push live`.  You
might also want to `link` to `live`, and edit it directly.

*Granularity:* You might want to host a folder at one version, but
 make an internal file a different version.

## A server that renders from `/code/`

## Other stuff...

We can implement `bs` in emacs (or other editor) directly, so that you
don't have to save through the filesystem, and you can live edit with
other people and see their keystrokes next to yours, and you can
control which version you are editing directly from the editor.